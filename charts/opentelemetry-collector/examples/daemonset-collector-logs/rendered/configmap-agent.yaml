---
# Source: opentelemetry-collector/templates/configmap-agent.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-opentelemetry-collector-agent
  labels:
    helm.sh/chart: opentelemetry-collector-0.20.0
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "0.53.0"
    app.kubernetes.io/managed-by: Helm
data:
  relay: |
    
    exporters:
        logging: {}
    extensions:
      health_check: {}
      memory_ballast:
        size_mib: "819"
    processors:
        batch:  {}
        memory_limiter:
          check_interval: 5s
          limit_mib: 1638
          spike_limit_mib: 512
    receivers:
      filelog:
        include: 
        - /var/log/pods/*/*/*.log
        exclude: []
        start_at: beginning
        include_file_name: false
        include_file_path: true
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.000000000-07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: attributes["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: attributes["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: attributes["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: attributes["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: attributes["k8s.pod.uid"]
          # Clean up log body
          - type: move
            from: attributes.log
            to: body
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${MY_POD_IP}:8888
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
          thrift_compact:
            endpoint: 0.0.0.0:6831
      zipkin:
        endpoint: 0.0.0.0:9411
    
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    service:
      extensions:
        - health_check
        - memory_ballast
      pipelines:
        logs:
          exporters:
            - logging
          processors:
            - memory_limiter
            - batch
          receivers:
            - otlp
            - filelog
        metrics:
          exporters:
            - logging
          processors:
            - memory_limiter
            - batch
          receivers:
            - otlp
            - prometheus
        traces:
          exporters:
            - logging
          processors:
            - memory_limiter
            - batch
          receivers:
            - otlp
            - jaeger
            - zipkin
      telemetry:
        metrics:
          address: 0.0.0.0:8888
